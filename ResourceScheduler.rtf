{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 First create the interfaces:\
	-Gateway and Message are given\
	-For the completed method to be able to define the group of the message, a CallbackMessage 	interface.\
	-MessageReceiver is basically anyone who can receive messages\
\
Testing:\
	-Mocking the gateway is necessary for testing\
	-Create messages with different IDs\
	-Test if the queue is empty after receiving the equals of less messages than resources\
	-Test if the queue is not empty after receiving more messages than resources\
	-Test if queue is empty after all messages completed, and the resources received the last ones\
	-Test if the gateway receives the messages in correct order\
\
Implementation:\
	-If a message received, if resources are available it should be sent immidiatetely\
	-If resources are unavailable, it should be put in a queue, based on its groupId\
	-Also maintenance of a priority list is needed, if the messages from the currently processed 	group run out\
	-If a message is completed, it should call back by providing itself to the callback receiver, which 	in our case will be implemented by the scheduler\
\
Extensions:\
	-A message can have a terminated state, if a message like this received, we should store its id 	in a Set to make sure this is the last one to be sent.\
	-ResourceScheduler can be set up with a Set of groupIds, and if the received message is part of 	any of these group, gateway should not receive it\
\
3rd party libraries:\
	-mockito-all-1.9.5.jar\
	-log4j-1.2.17.jar}